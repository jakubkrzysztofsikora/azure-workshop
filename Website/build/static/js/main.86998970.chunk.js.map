{"version":3,"sources":["components/SerieList.jsx","components/Dialog.jsx","services/seriesApiClient.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["SerieList","props","_props$listOfSeries","listOfSeries","react_default","a","createElement","List_default","className","map","serie","ListItem_default","alignItems","key","concat","name","ListItemAvatar_default","dist_default","percentage","Math","round","score","text","initialAnimation","ListItemText_default","primary","secondary","Fragment","Typography_default","component","color","numberOfTweets","AuthDialog","Dialog_default","open","onClose","handleClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","margin","label","type","fullWidth","onChange","handleChange","DialogActions_default","Button_default","onClick","handleSave","seriesApiClient","url","apiKey","onError","axios","get","then","response","data","value","x","Name","Rating","VotesCount","catch","error","App","state","series","authOpen","openAuth","_this","setState","closeAuth","saveAuth","cookies","set","maxAge","sameSite","fetchSeries","event","target","remove","this","src","logo","alt","Dialog_AuthDialog","components_SerieList","Component","withCookies","Boolean","window","location","hostname","match","ReactDOM","render","es6","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.86998970.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgressbar from 'react-circular-progressbar';\n\nconst scoringClass = score => score < 0.5\n  ? 'pretty-bad'\n  : score < 0.8\n    ? 'pretty-good'\n    : 'excellent';\n\nconst SerieList = (props) => {\n  const { listOfSeries = [] } = props;\n  return (\n    <List className='serie-list'>\n      {\n        listOfSeries.map(serie =>\n          <ListItem alignItems='flex-start' className='serie-list__element' key={`serie-${serie.name}`}>\n            <ListItemAvatar className='serie-list__element--score'>\n              <CircularProgressbar\n                percentage={Math.round(serie.score * 100)}\n                text={`${Math.round(serie.score * 10)} / 10`}\n                initialAnimation={true}\n                className={`pie-chart ${scoringClass(serie.score)}`} />\n            </ListItemAvatar>\n            <ListItemText className='serie-list__element--title'\n              primary={serie.name}\n              secondary={\n                <React.Fragment>\n                  <Typography component='span' color='textPrimary' className='inline'>\n                    {serie.numberOfTweets}\n                  </Typography>\n                  tweets about this TV Series.\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        )\n      }\n    </List>\n  );\n}\n\nSerieList.propTypes = {\n  listOfSeries: PropTypes.array.isRequired,\n};\n\nexport default SerieList;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport const AuthDialog = props => {\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={props.handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>Provide Azure Search API KEY</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        To use this weird website you need to give us access to your azure search index. Go ahead and grab your api key, then paste it here.\n          </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin='dense'\n                        id='apikey'\n                        label='Api Key'\n                        type='password'\n                        fullWidth\n                        onChange={props.handleChange}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.handleClose} color='primary'>\n                        Cancel\n          </Button>\n                    <Button onClick={props.handleSave} color='primary'>\n                        Save\n          </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import axios from 'axios';\n\nexport default (url, apiKey, onError) => {\n    return axios.get(`${url}&api-key=${apiKey}&search=*`)\n        .then(response => {\n            return response.data.value.map(x => {\n                return {\n                    name: x.Name,\n                    score: x.Rating,\n                    numberOfTweets: x.VotesCount\n                };\n            });\n        })\n        .catch(error => {\n            onError();\n        });\n}\n","import React, { Component } from 'react';\nimport { withCookies } from 'react-cookie';\n\nimport logo from './logo.png';\nimport SerieList from './components/SerieList';\nimport { AuthDialog } from './components/Dialog';\nimport seriesApiClient from './services/seriesApiClient';\n\nconst url = 'https://searchasdf.search.windows.net/indexes/azuresql-index/docs?api-version=2017-11-11';\n\nclass App extends Component {\n  state = {\n    series: [],\n    authOpen: false,\n    apiKey: null\n  };\n\n  openAuth = () => this.setState({ authOpen: true });\n  closeAuth = () => this.setState({ authOpen: false });\n  saveAuth = () => {\n    this.props.cookies.set('apiKey', this.state.apiKey, { maxAge: 500, sameSite: 'strict' });\n    this.closeAuth();\n    this.fetchSeries();\n  }\n  handleChange = event => this.setState({ apiKey: event.target.value });\n  fetchSeries = () => {\n    seriesApiClient(url, this.props.cookies.get('apiKey'), () => {\n      this.props.cookies.remove('apiKey');\n      this.openAuth();\n    }).then(data => this.setState({series: data}));\n  }\n\n  componentDidMount() {\n    if (!this.props.cookies.get('apiKey')) {\n      this.openAuth();\n    }\n    else {\n      this.fetchSeries();\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n        </header>\n        <AuthDialog open={this.state.authOpen} handleClose={this.closeAuth} handleSave={this.saveAuth} handleChange={this.handleChange} />\n        <SerieList listOfSeries={this.state.series} />\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nimport './index.css';\nimport './App.css';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './components/SerieList.css'\n\nReactDOM.render(<CookiesProvider><App />,</CookiesProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.57609d3a.png\";"],"sourceRoot":""}